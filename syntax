CRON(8)                   System Manager's Manual                  CRON(8)

NNAAMMEE
       cron - daemon to execute scheduled commands (Vixie Cron)

SSYYNNOOPPSSIISS
       cron [--ff] [--ll] [--LL _l_o_g_l_e_v_e_l]

DDEESSCCRRIIPPTTIIOONN
       _c_r_o_n  is  started automatically from /etc/init.d on entering multi-
       user runlevels.

OOPPTTIIOONNSS
       --ff      Stay in foreground mode, don't daemonize.

       --ll      Enable LSB compliant names for /etc/cron.d files. This set‐
               ting,  however,  does not affect the parsing of files under
               /etc/cron.hourly,  /etc/cron.daily,   /etc/cron.weekly   or
               /etc/cron.monthly.

       --nn      Include  the  FQDN  in  the  subject when sending mails. By
               default, cron will abbreviate the hostname.

       --LL lloogglleevveell
               Tell cron what to log about jjoobbss (errors are logged regard‐
               less of this value) as the sum of the following values:

                   11      will log the start of all cron jobs

                   22      will log the end of all cron jobs

                   44      will log all failed jobs (exit status != 0)

                   88      will log the process number of all cron jobs

               The  default  is  to log the start of all jobs (1). Logging
               will be disabled if _l_e_v_e_l_s is set to zero (0). A  value  of
               fifteen (15) will select all options.

NNOOTTEESS
       _c_r_o_n searches its spool area (/var/spool/cron/crontabs) for crontab
       files (which are named after  accounts  in  /etc/passwd);  crontabs
       found are loaded into memory.  Note that crontabs in this directory
       should not be accessed directly - the  _c_r_o_n_t_a_b  command  should  be
       used to access and update them.

       _c_r_o_n also reads /etc/crontab, which is in a slightly different for‐
       mat (see _c_r_o_n_t_a_b_(_5_)).  In Debian, the content  of  /etc/crontab  is
       predefined to run programs under /etc/cron.hourly, /etc/cron.daily,
       /etc/cron.weekly and /etc/cron.monthly. This configuration is  spe‐
       cific to Debian, see the note under DDEEBBIIAANN SSPPEECCIIFFIICC below.

       Additionally,  in  Debian,  _c_r_o_n reads the files in the /etc/cron.d
       directory.  _c_r_o_n treats the files in /etc/cron.d as in the same way
       as  the  /etc/crontab  file (they follow the special format of that
       file, i.e. they include the _u_s_e_r field). However, they are indepen‐
       dent of /etc/crontab: they do not, for example, inherit environment
       variable settings from it. This change is specific  to  Debian  see
       the note under DDEEBBIIAANN SSPPEECCIIFFIICC below.

       Like /etc/crontab, the files in the /etc/cron.d directory are moni‐
       tored for changes. In general, the system administrator should  not
       use /etc/cron.d/, but use the standard system crontab /etc/crontab.

       /etc/crontab  and  the  files in /etc/cron.d must be owned by root,
       and must not be group- or other-writable. In contrast to the  spool
       area,   the   files   under   /etc/cron.d   or   the   files  under
       /etc/cron.hourly,     /etc/cron.daily,     /etc/cron.weekly     and
       /etc/cron.monthly may also be symlinks, provided that both the sym‐
       link and the file it points to are owned by root.  The files  under
       /etc/cron.d  do  not  need  to be executable, while the files under
       /etc/cron.hourly,     /etc/cron.daily,     /etc/cron.weekly     and
       /etc/cron.monthly  do,  as  they  are  run  by  _r_u_n_-_p_a_r_t_s (see _r_u_n_-
       _p_a_r_t_s_(_8_) for more information).

       _c_r_o_n then wakes up every minute,  examining  all  stored  crontabs,
       checking  each  command  to  see if it should be run in the current
       minute.  When executing commands, any output is mailed to the owner
       of  the  crontab  (or  to  the user named in the MAILTO environment
       variable in the crontab, if such exists).  The children  copies  of
       cron  running these processes have their name coerced to uppercase,
       as will be seen in the syslog and ps output.

       Additionally, _c_r_o_n checks each minute to see if  its  spool  direc‐
       tory's  modtime  (or  the  modtime  on  the  _/_e_t_c_/_c_r_o_n_t_a_b file) has
       changed, and if it has, _c_r_o_n will then examine the modtime  on  all
       crontabs files and reload those which have changed.  Thus _c_r_o_n need
       not be restarted whenever a crontab file is  modified.   Note  that
       the  _c_r_o_n_t_a_b(1)  command updates the modtime of the spool directory
       whenever it changes a crontab.

       Special considerations exist when the clock is changed by less than
       3  hours,  for example at the beginning and end of daylight savings
       time. If the time has moved forwards, those jobs which  would  have
       run in the time that was skipped will be run soon after the change.
       Conversely, if the time has moved backwards by less than  3  hours,
       those jobs that fall into the repeated time will not be re-run.

       Only  jobs that run at a particular time (not specified as @hourly,
       nor with '*' in the hour or minute specifier)  are  affected.  Jobs
       which  are  specified  with wildcards are run based on the new time
       immediately.

       Clock changes of more than 3 hours are considered to be corrections
       to the clock, and the new time is used immediately.

       _c_r_o_n logs its action to the syslog facility 'cron', and logging may
       be controlled using the standard _s_y_s_l_o_g_d_(_8_) facility.

EENNVVIIRROONNMMEENNTT
       If configured in _/_e_t_c_/_d_e_f_a_u_l_t_/_c_r_o_n in Debian systems, the _c_r_o_n dae‐
       mon  localisation  settings  environment can be managed through the
       use of _/_e_t_c_/_e_n_v_i_r_o_n_m_e_n_t or through the use  of  _/_e_t_c_/_d_e_f_a_u_l_t_/_l_o_c_a_l_e
       with  values  from  the  latter  overriding values from the former.
       These files are read and they will  be  used  to  setup  the  LANG,
       LC_ALL,  and  LC_CTYPE  environment  variables. These variables are
       then used to set the charset of mails, which defaults to 'C'.

       This does NNOOTT affect the environment of tasks running  under  cron.
       For  more  information  on  how to modify the environment of tasks,
       consult _c_r_o_n_t_a_b_(_5_)

       The daemon will use, if present, the definition from  _/_e_t_c_/_t_i_m_e_z_o_n_e
       for the timezone.

       The  environment can be redefined in user's crontab definitions but
       _c_r_o_n will only handle tasks in a single timezone.

DDEEBBIIAANN SSPPEECCIIFFIICC
       Debian introduces some changes to _c_r_o_n  that  were  not  originally
       available upstream. The most significant changes introduced are:

       —      Support   for   /etc/cron.{hourly,daily,weekly,monthly}  via
              /etc/crontab,

       —      Support for /etc/cron.d (drop-in dir for package crontabs),

       —      PAM support,

       —      SELinux support,

       —      auditlog support,

       —      DST and other time-related changes/fixes,

       —      SGID crontab(1) instead of SUID root,

       —      Debian-specific file locations and commands,

       —      Debian-specific configuration (/etc/default/cron),

       —      numerous other smaller features and fixes.

       Support for /etc/cron.hourly, /etc/cron.daily, /etc/cron.weekly and
       /etc/cron.monthly is provided in Debian through the default setting
       of  the  /etc/crontab  file  (see  the   system-wide   example   in
       _c_r_o_n_t_a_b_(_5_)).   The default system-wide crontab contains four tasks:
       run every hour, every day, every week  and  every  month.  Each  of
       these tasks will execute rruunn--ppaarrttss providing each one of the direc‐
       tories as an argument. These  tasks  are  disabled  if  aannaaccrroonn  is
       installed (except for the hourly task) to prevent conflicts between
       both daemons.

       As described above, the files under these directories  have  to  be
       pass  some sanity checks including the following: be executable, be
       owned by root, not be writable by group or other and, if  symlinks,
       point  to  files  owned  by root. Additionally, the file names must
       conform to the filename requirements of  rruunn--ppaarrttss:  they  must  be
       entirely  made  up of letters, digits and can only contain the spe‐
       cial signs underscores ('_') and hyphens ('-'). Any file that  does
       not  conform  to  these  requirements  will not be executed by rruunn--
       ppaarrttss.  For example, any file  containing  dots  will  be  ignored.
       This is done to prevent cron from running any of the files that are
       left by the Debian package management system when handling files in
       /etc/cron.d/  as  configuration  files (i.e. files ending in .dpkg-
       dist, .dpkg-orig, and .dpkg-new).

       This feature can be used by system administrators and  packages  to
       include  tasks that will be run at defined intervals. Files created
       by packages in these directories should be named after the  package
       that supplies them.

       Support  for  /etc/cron.d  is  included  in the _c_r_o_n daemon itself,
       which handles this location as the system-wide crontab spool.  This
       directory  can contain any file defining tasks following the format
       used in /etc/crontab, i.e. unlike the user cron spool, these  files
       must  provide  the  username to run the task as in the task defini‐
       tion.

       Files in this directory have to be owned by root, do not need to be
       executable  (they  are configuration files, just like /etc/crontab)
       and must conform to the same naming  convention  as  used  by  _r_u_n_-
       _p_a_r_t_s_(_8_):  they  must  consist solely of upper- and lower-case let‐
       ters, digits, underscores, and hyphens. This means that they ccaannnnoott
       contain  any  dots.   If  the  --ll option is specified to _c_r_o_n (this
       option can be setup through  /etc/default/cron,  see  below),  then
       they must conform to the LSB namespace specification, exactly as in
       the ----llssbbssyyssiinniitt option in _r_u_n_-_p_a_r_t_s.

       The intended purpose of this feature  is  to  allow  packages  that
       require    finer    control    of   their   scheduling   than   the
       /etc/cron.{hourly,daily,weekly,monthly}  directories   to   add   a
       crontab  file  to /etc/cron.d. Such files should be named after the
       package that supplies them.

       Also,  the  default  configuration  of  _c_r_o_n   is   controlled   by
       _/_e_t_c_/_d_e_f_a_u_l_t_/_c_r_o_n  which is read by the init.d script that launches
       the _c_r_o_n daemon. This file determines whether _c_r_o_n  will  read  the
       system's  environment  variables and makes it possible to add addi‐
       tional options to the _c_r_o_n program before it is executed, either to
       configure  its  logging  or  to  define how it will treat the files
       under /etc/cron.d.

SSEEEE AALLSSOO
       crontab(1), crontab(5), run-parts(8)

AAUUTTHHOORR
       Paul Vixie <paul@vix.com> is the author of _c_r_o_n and  original  cre‐
       ator  of  this  manual  page.  This page has also been modified for
       Debian by Steve Greenland, Javier Fernandez-Sanguino and  Christian
       Kastner.

4th Berkeley Distribution      19 April 2010                       CRON(8)
